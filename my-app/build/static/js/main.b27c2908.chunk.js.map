{"version":3,"sources":["sortingAlgo/mergeSort.js","sortingVis/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxilaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Button","styled","button","_templateObject","SortingVisualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resetArray","min","max","random","setState","_loop","arrayBars","document","getElementsByClassName","isColorChange","console","log","_animations$i","slicedToArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","newHeight","height","_this2","react_default","a","createElement","className","onClick","mergeSort","map","value","idx","key","React","Component","App","SortingVisualizer_SortingVisualizer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b27c2908.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const auxilaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxilaryArray,\r\n    animations\r\n){\r\n    if(startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergeSortHelper(auxilaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxilaryArray, middleIdx+1, endIdx, mainArray, animations);\r\n\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxilaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxilaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx+1;\r\n\r\n    while(i<=middleIdx && j<=endIdx)\r\n    {\r\n        animations.push([i, j]);\r\n\r\n        animations.push([i, j]);\r\n\r\n        if(auxilaryArray[i] <= auxilaryArray[j])\r\n        {\r\n            animations.push([k, auxilaryArray[i]]);\r\n            mainArray[k++] = auxilaryArray[i++];\r\n        }\r\n        else\r\n        {\r\n            animations.push([k, auxilaryArray[j]]);\r\n            mainArray[k++] = auxilaryArray[j++];\r\n        }\r\n    }\r\n\r\n    while(i<=middleIdx)\r\n    {\r\n        animations.push([i, i]);\r\n\r\n        animations.push([i, i]);\r\n\r\n        animations.push([k, auxilaryArray[i]]);\r\n        mainArray[k++] = auxilaryArray[i++];\r\n    }\r\n\r\n    while(j<=endIdx)\r\n    {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n\r\n        animations.push([k, auxilaryArray[j]]);\r\n        mainArray[k++] = auxilaryArray[j++];\r\n    }\r\n}","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgo/mergeSort.js';\r\nimport './SortingVisualizer.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background: red;\r\n  border-radius: 8px;\r\n  color: white;\r\n  margin-left: 28%;\r\n  margin-top: 23px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst ANIMATION_SPEED = 10;\r\n\r\nconst NUMBER_OF_BARS = 100;\r\n\r\nconst PRIMARY_COLOR = '#ff5454';\r\n\r\nconst FINISH_COLOR = '#2fc7f5';\r\n\r\nconst SECONDARY_COLOR = '#f3fc49';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n    \r\n    resetArray(){\r\n        const array = [];\r\n\r\n        for(let i=0; i < NUMBER_OF_BARS; i++) {\r\n            array.push(randomIntFromInterval(30, 300));\r\n        }\r\n        //console.log(array);\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort()\r\n    {\r\n        \r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        \r\n        for(let i=0; i<animations.length; i++)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = ((i%3) !== 2);\r\n            console.log(arrayBars);\r\n            if(isColorChange){\r\n                \r\n                //console.log(i);\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = (i%3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED);\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    //console.log(barOneIdx);\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    //console.log(newHeight);\r\n                    barOneStyle.height = newHeight+'px';\r\n                }, i * ANIMATION_SPEED); \r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            for(let i=0; i<arrayBars.length; i++)\r\n            {\r\n                const barStyle = arrayBars[i].style;\r\n                barStyle.backgroundColor = FINISH_COLOR;\r\n            }}, (animations.length * ANIMATION_SPEED) + 10);\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                <div className='wrapper-button'>\r\n                   \r\n                    <Button onClick={() => this.resetArray()}> Generate New Array </Button>\r\n                    <Button onClick={() => this.mergeSort()}> Merge Sort </Button>\r\n\r\n                    {/* <button onClick={() => this.testSortingAlgo()}>\r\n                    Test Sorting Algorithms (BROKEN)\r\n                    </button> */}\r\n                    \r\n                </div>\r\n                \r\n                <div className='wrapper-bars'>\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: value + 'px',\r\n                            }}></div>\r\n                    ))}\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './sortingVis/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}